{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"yMACMA,EAAU,sDAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALD,SAACG,EAAIF,GAEf,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCF9BK,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEpD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCM3BK,EAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,KCJHC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,6DAqFSC,EAhFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAAqBjC,MAAK,SAACkC,GACzBT,EAASS,QAEV,IAEH,IAqCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAC5B,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASc,IACvB,8BACE,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAC7B,EAAM8B,GAAP,OACf,cAAC,EAAD,CAEE9B,KAAMA,EACNC,iBAAkB,kBA1CD,SAACJ,GAC1B,IAAMG,EAAOgB,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAEnC,KAAOA,KAClCoC,EAAW,2BAAQjC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACU5B,EAAIoC,GACXzC,MAAK,SAAC0C,GACLjB,EAASD,EAAMa,KAAI,SAAC7B,GAAD,OAAWA,EAAKH,KAAOA,EAAKG,EAAOkC,SAEvDC,OAAM,SAACC,GACNb,EAAgB,aAAD,OACAvB,EAAKK,QADL,0CAGfgC,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAACI,GAAD,OAAOA,EAAEnC,KAAOA,SA0BVyC,CAAmBtC,EAAKH,MAF3CiC,QAMX,uBAAMS,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASa,EACTyB,MAAM,IAAIC,MAAOC,cACjB1C,UAAW2C,KAAKC,SAAW,IAE7BtB,EAAmBiB,GAAYlD,MAAK,SAAC0C,GACnCjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QAkDX,UACE,uBAAO8B,MAAO/B,EAASgC,SA3BJ,SAACV,GACxBrB,EAAWqB,EAAMW,OAAOF,UA2BpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCvFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b6a9d999.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://stormy-tundra-16544.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update =(id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n\r\n","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return(\r\n      <li className='note'>\r\n        {note.content} \r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n  }\r\n\r\nexport default Note","\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState, useEffect } from \"react\";\nimport noteService from \"./services/notes\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app by damyco 2021</em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `the note '${note.content}' was already deleted from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}